language: c
sudo: required

env:
  - TARGET_DIST=ubuntu TARGET_VERSION=1604 RTM_VERSION=1.0.0
  - TARGET_DIST=ubuntu TARGET_VERSION=1804 RTM_VERSION=1.0.0

script:
  - echo $TARGET_DIST $TARGET_VERSION
  - docker build -t $TARGET_DIST-$TARGET_VERSION --build-arg RTM_VERSION=$RTM_VERSION -f docker/Dockerfile-$TARGET_DIST-$TARGET_VERSION .
  - export CONTAINER_NAME=$TARGET_DIST-$TARGET_VERSION
  - echo $CONTAINER_NAME
  - docker run -ti -d --name $CONTAINER_NAME -v $TRAVIS_BUILD_DIR/tmp_release:/release_tmp $CONTAINER_NAME
  - docker exec -ti $CONTAINER_NAME cat /etc/os-release
  - docker exec -ti $CONTAINER_NAME bash -c "cd /integtest-$RTM_VERSION;./configure --prefix=/release_tmp --program-suffix=$TARGET_VERSION"
  - docker exec -ti $CONTAINER_NAME bash -c "cd /integtest-$RTM_VERSION; make; make install"
  - ls $TRAVIS_BUILD_DIR/tmp_release/bin
 
stages:
  - src_build
  - test
  - deploy

jobs:
  include:
    - stage: src_build
      script: echo "src_build"
    - stage: deploy
      script:
        - openssl aes-256-cbc -K $encrypted_31d12b5c5a08_key -iv $encrypted_31d12b5c5a08_iv -in id_rsa.enc -out id_rsa -d
        - cp id_rsa ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
        - git config --global user.email "example@example.com"
        - git config --global user.name "rtccitest"
        - git clone git@github.com:rtccitest/release_test.git
        - cp $TRAVIS_BUILD_DIR/tmp_release/bin/* release_test
        - ls release_test
        - cd release_test
        - git add -A
        - git commit -m "release test"
        - git push



 



